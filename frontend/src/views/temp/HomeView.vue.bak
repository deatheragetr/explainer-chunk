<template>
  <div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
      <div class="mb-6">
        <!-- Directory Breadcrumb -->
        <DirectoryBreadcrumb />
      </div>

      <div class="mb-8 flex justify-between items-center">
        <h1 class="text-2xl font-bold text-gray-800">
          {{ currentDirectory ? currentDirectory.name : 'My Documents' }}
        </h1>
        <div class="flex space-x-4">
          <button
            @click="showCreateDirModal = true"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                clip-rule="evenodd"
              />
            </svg>
            New Folder
          </button>
          <DocumentUploadModal @document-loaded="handleDocumentLoaded">
            <template #default="{ openModal }">
              <button
                @click="openModal"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                <svg
                  class="h-5 w-5 mr-2"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
                Upload Document
              </button>
            </template>
          </DocumentUploadModal>
        </div>
      </div>

      <!-- Directories Section -->
      <div v-if="directoryContents && directoryContents.directories.length > 0" class="mb-8">
        <h2 class="text-lg font-semibold text-gray-700 mb-4">Folders</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          <div
            v-for="dir in directoryContents.directories"
            :key="dir._id"
            @click="navigateToDirectory(dir._id)"
            class="bg-white rounded-lg shadow-md overflow-hidden transform transition duration-300 ease-in-out hover:scale-105 cursor-pointer group"
          >
            <div class="p-4 flex items-center">
              <div class="bg-indigo-100 rounded-lg p-3 mr-4">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-8 w-8 text-indigo-600"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" />
                </svg>
              </div>
              <div>
                <h3
                  class="text-lg font-semibold text-gray-800 group-hover:text-indigo-600 transition-colors"
                >
                  {{ dir.name }}
                </h3>
                <p class="text-sm text-gray-500">Folder</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Empty state -->
      <div v-if="isEmptyState" class="text-center">
        <div class="bg-white rounded-lg shadow-xl p-8 max-w-2xl mx-auto">
          <svg
            class="mx-auto h-24 w-24 text-indigo-400"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            />
          </svg>
          <h2 class="mt-6 text-3xl font-extrabold text-gray-900">No content yet</h2>
          <p class="mt-2 text-lg text-gray-600">
            Get started by creating a folder or uploading your first document.
          </p>
          <div class="mt-8 flex justify-center space-x-4">
            <button
              @click="showCreateDirModal = true"
              class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 mr-2"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                  clip-rule="evenodd"
                />
              </svg>
              Create Folder
            </button>
            <DocumentUploadModal @document-loaded="handleDocumentLoaded">
              <template #default="{ openModal }">
                <button
                  @click="openModal"
                  class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  <svg
                    class="-ml-1 mr-3 h-5 w-5"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z"
                      clip-rule="evenodd"
                    />
                  </svg>
                  Upload Your First Document
                </button>
              </template>
            </DocumentUploadModal>
          </div>
        </div>
      </div>

      <!-- Documents Section -->
      <div v-if="documents && documents.length > 0">
        <h2 class="text-lg font-semibold text-gray-700 mb-4">Documents</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          <div v-for="doc in documents" :key="doc.id" class="group">
            <div @click="navigateToDocument(doc)" class="block cursor-pointer">
              <div
                class="bg-white rounded-lg shadow-lg overflow-hidden transform transition duration-300 ease-in-out group-hover:scale-105"
              >
                <div class="thumbnail-container">
                  <img
                    v-if="doc.thumbnail && doc.thumbnail.presigned_url"
                    :src="doc.thumbnail.presigned_url"
                    :alt="doc.title"
                    class="w-full h-full object-cover"
                  />
                  <div
                    v-else
                    class="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-100 to-indigo-200"
                  >
                    <svg
                      class="w-2/5 h-2/5 text-indigo-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                      ></path>
                    </svg>
                  </div>
                </div>
                <div class="p-4">
                  <h2 class="text-lg font-semibold text-gray-800 truncate">{{ doc.title }}</h2>
                  <p class="text-sm text-gray-500 mt-1 truncate">{{ doc.file_name }}</p>
                  <p class="text-sm text-gray-600 mt-1">{{ formatFileType(doc.file_type) }}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div v-if="loading" class="flex justify-center mt-8">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
      </div>

      <!-- Load More button -->
      <div v-if="hasMore && documents && documents.length > 0" class="flex justify-center mt-8">
        <button
          @click="loadMore"
          class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50"
        >
          Load More
        </button>
      </div>
    </div>

    <!-- Create Directory Modal -->
    <div
      v-if="showCreateDirModal"
      class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
    >
      <div class="bg-white rounded-lg p-6 w-96 shadow-xl">
        <h3 class="text-lg font-semibold mb-4">Create New Folder</h3>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-medium mb-2" for="dirName">
            Folder Name
          </label>
          <input
            id="dirName"
            v-model="newDirName"
            type="text"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            placeholder="Enter folder name"
            @keyup.enter="createDirectory"
          />
        </div>
        <div class="flex justify-end space-x-3">
          <button
            @click="showCreateDirModal = false"
            class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 focus:outline-none"
          >
            Cancel
          </button>
          <button
            @click="createDirectory"
            class="px-4 py-2 text-white bg-indigo-600 rounded-md hover:bg-indigo-700 focus:outline-none"
            :disabled="!newDirName.trim()"
          >
            Create
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent, ref, onMounted, computed, watch } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import DocumentUploadModal from '@/components/DocumentUploadModal.vue'
import DirectoryBreadcrumb from '@/components/DirectoryBreadcrumb.vue'
import { useDirectoryStore } from '@/store/directory'
import api from '@/api/axios'

interface Document {
  id: string
  file_name: string
  file_type: string
  url_friendly_file_name: string
  title: string
  custom_title?: string
  thumbnail?: {
    presigned_url: string
  }
}

export default defineComponent({
  name: 'HomeView',
  components: {
    DocumentUploadModal,
    DirectoryBreadcrumb
  },
  setup() {
    const documents = ref<Document[]>([])
    const loading = ref(false)
    const hasMore = ref(false)
    const nextCursor = ref<string | null>(null)
    const router = useRouter()
    const route = useRoute()
    const directoryStore = useDirectoryStore()

    // Directory state
    const showCreateDirModal = ref(false)
    const newDirName = ref('')

    const currentDirectory = computed(() => directoryStore.currentDirectory)
    const directoryContents = computed(() => directoryStore.directoryContents)

    // Debug computed property to help diagnose empty state issues
    const isEmptyState = computed(() => {
      const hasDirectories = !!directoryContents.value?.directories?.length
      const hasDocuments = !!documents.value?.length
      const isEmpty = !loading.value && !hasDirectories && !hasDocuments

      console.log('Empty state check:', {
        loading: loading.value,
        hasDirectories,
        hasDocuments,
        isEmpty
      })

      return isEmpty
    })

    const fetchDocuments = async () => {
      if (loading.value) return

      loading.value = true
      try {
        const params: any = {
          before: nextCursor.value,
          limit: 12
        }

        // Always explicitly set directory_id parameter
        if (currentDirectory.value) {
          // For a specific directory
          params.directory_id = currentDirectory.value._id
        } else {
          // For root directory, use empty string
          params.directory_id = ''
        }

        console.log('Fetching documents with params:', params)

        const response = await api.get('/document-uploads', { params })

        if (nextCursor.value) {
          // Append to existing documents if we're paginating
          documents.value = [...documents.value, ...response.data.documents]
        } else {
          // Replace documents if this is the first load
          documents.value = response.data.documents
        }

        nextCursor.value = response.data.next_cursor
        hasMore.value = !!response.data.next_cursor
      } catch (error) {
        console.error('Error fetching documents:', error)
      } finally {
        loading.value = false
      }
    }

    const loadMore = () => {
      fetchDocuments()
    }

    const handleDocumentLoaded = (documentData: any) => {
      const documentUploadId = documentData.id || documentData.document_upload_id
      const newPath = `/uploads/${documentUploadId}/${documentData.url_friendly_file_name}/read`
      router.push(newPath)
    }

    const navigateToDocument = (doc: any) => {
      const documentId = doc.id
      const newPath = `/uploads/${documentId}/${doc.url_friendly_file_name}/read`
      router.push(newPath)
    }

    const formatFileType = (fileType: string): string => {
      const fileTypeMap: { [key: string]: string } = {
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Excel',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Word',
        'application/pdf': 'PDF',
        'text/plain': 'Text',
        'text/markdown': 'Markdown',
        'application/json': 'JSON',
        'text/html': 'HTML',
        'application/epub+zip': 'EPUB',
        'text/csv': 'CSV'
      }

      // Check if we have a specific mapping for this file type
      if (fileType in fileTypeMap) {
        return fileTypeMap[fileType]
      }

      // If no specific mapping, fall back to the previous behavior
      return fileType.split('/').pop()?.toUpperCase() || fileType
    }

    const navigateToDirectory = (directoryId: string) => {
      directoryStore.navigateToDirectory(directoryId)
    }

    const createDirectory = async () => {
      if (newDirName.value.trim()) {
        try {
          const parentId = currentDirectory.value?._id || null
          await directoryStore.createDirectory(newDirName.value, parentId)
          showCreateDirModal.value = false
          newDirName.value = ''
        } catch (error: any) {
          console.error('Failed to create directory:', error)
        }
      }
    }

    // Watch for changes in the current directory and reload documents
    watch(
      () => directoryStore.currentDirectory,
      (newDirectory) => {
        console.log('Directory changed:', newDirectory ? newDirectory.name : 'Root')
        // Reset pagination and fetch documents for the new directory
        nextCursor.value = null
        fetchDocuments()
      }
    )

    onMounted(async () => {
      loading.value = true
      try {
        // First, fetch all directories
        await directoryStore.fetchAllDirectories()

        // Check if we're navigating to a specific directory from the URL
        if (route.name === 'directory' && route.params.id) {
          const directoryId = route.params.id as string
          const path = route.params.path as string

          console.log(`Navigating to directory from URL: path=${path}, id=${directoryId}`)

          // Use the navigateToPath method which handles both path and ID
          await directoryStore.navigateToPath(path, directoryId)
        } else {
          // Otherwise navigate to the root directory
          await directoryStore.navigateToDirectory(null)
        }

        // Ensure directory navigation is complete before fetching documents
        nextCursor.value = null

        // Documents will be fetched by the watcher on currentDirectory
      } catch (error) {
        console.error('Error initializing view:', error)
      } finally {
        loading.value = false
      }
    })

    return {
      documents,
      loading,
      hasMore,
      loadMore,
      formatFileType,
      handleDocumentLoaded,
      currentDirectory,
      directoryContents,
      navigateToDirectory,
      showCreateDirModal,
      newDirName,
      createDirectory,
      isEmptyState,
      navigateToDocument
    }
  }
})
</script>

<style scoped>
.thumbnail-container {
  height: 160px;
  overflow: hidden;
}
</style>
